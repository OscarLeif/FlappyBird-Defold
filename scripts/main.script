-- main.script

local hashes = require('utils.hashes')

-- Define constants for game states
local STATES = {
    MAIN_MENU = "MAIN_MENU",
    GAME = "GAME",
    GAME_OVER = "GAME_OVER",
    GAME_TO_MENU = "GAME_TO_MENU"
}

-- Define URLs
local main_menu_proxy_url = msg.url("main_collection:/main#main_menu_proxy")
local game_proxy_url = msg.url("main_collection:/main#game_proxy")
local transition_url = msg.url("main_collection:/transition")

-- Define constants for messages
local MESSAGES = {
    FADE_IN = hash("fade_in"),
    FADE_OUT = hash("fade_out"),
    INIT = hash("init"),
    START_MAIN_MENU = hash("start_main_menu"),
    START_GAME = hash("start_game"),
    RESTART_GAME = hash("restart_game"),
    FADE_IN_COMPLETE = hash("fade_in_complete")
}

function init(self)
    print("main.script file init")
    msg.post(".", MESSAGES.INIT)
    self.state = STATES.MAIN_MENU
end

function on_message(self, message_id, message, sender)
    if message_id == MESSAGES.INIT then
        self.state = STATES.MAIN_MENU
        print("main.script load main_menu_proxy")
        msg.post(transition_url, MESSAGES.FADE_OUT)
        msg.post(main_menu_proxy_url, hashes.LOAD)
    end

    if message_id == MESSAGES.START_MAIN_MENU then
        if self.state ~= STATES.MAIN_MENU and self.state == STATES.GAME then
            self.state = STATES.MAIN_MENU
            self.reload_main_menu = "reload_main_menu"
            msg.post(transition_url, MESSAGES.FADE_IN)
        end
    end

    if message_id == MESSAGES.START_GAME then
        if self.state == STATES.MAIN_MENU then
            self.disable_main_menu = "disable_main_menu"
            msg.post(transition_url, MESSAGES.FADE_IN)
            self.next_world_load = game_proxy_url
        end
    end

    if message_id == MESSAGES.RESTART_GAME then
        if self.state == STATES.GAME then
            msg.post(transition_url, MESSAGES.FADE_IN)
            self.restart_game = "restart_game"
        end
    end

    if message_id == hashes.PROXY_LOADED then
        print("proxy loaded")
        print(sender)
        msg.post(transition_url, MESSAGES.FADE_OUT)

        if sender == main_menu_proxy_url then
            msg.post(sender, hashes.ENABLE)
            msg.post(sender, "acquire_input_focus")
        elseif sender == game_proxy_url then
            msg.post(sender, hashes.ENABLE)
            msg.post(sender, hashes.INPUT_FOCUS_GET)
            self.state = STATES.GAME
        end
    end

    if message_id == hashes.PROXY_UNLOADED then
        if self.state == STATES.GAME then
            print("reload the game")
            msg.post(game_proxy_url, hashes.LOAD)
        elseif self.state == STATES.GAME_TO_MENU then
            print("we could have issues")
            msg.post(main_menu_proxy_url, hashes.ENABLE)
        end
    end

    if message_id == MESSAGES.FADE_IN_COMPLETE then
        if self.next_world_load then
            msg.post(self.next_world_load, hashes.LOAD)
            self.next_world_load = nil
        end
        if self.disable_main_menu == "disable_main_menu" then
            msg.post(main_menu_proxy_url, hashes.DISABLE)
            self.disable_main_menu = nil
        end
        if self.reload_main_menu then
            print("reload main menu")
            msg.post(game_proxy_url, hashes.UNLOAD)
            msg.post(main_menu_proxy_url, hashes.ENABLE)
            msg.post(transition_url, MESSAGES.FADE_OUT)
            self.reload_main_menu = nil
        end
        if self.restart_game then
            msg.post(game_proxy_url, hashes.UNLOAD)
            print("nice we unload the game scene but we must wait before load right")
            self.restart_game = nil
        end
    end
end
