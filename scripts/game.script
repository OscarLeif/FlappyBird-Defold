--[[file: game.script
	Game have 3 states idle, play, gameover
--]]
local hashes = require("utils.hashes") --see the file Utils/hashes.script
--local timer = require "timer"

local STATES = { ready = 0, game = 1, game_over = 2 }

local state            -- Like enum state
local game_camera      -- Local variable for the camera component
local camera_go
local player_go        --player go reference
local player_component --player component script

local pipe_factory
local pipes = {}
local PIPE_SPAWN_INTERVAL = 160 -- Distance interval to spawn new pipes
local next_spawn_x              -- Next x-coordinate to spawn a pipe

--Camera variables
local DISPLAY_WIDTH = sys.get_config_int("display.width")
local DISPLAY_HEIGHT = sys.get_config_int("display.height")
local screen_width
local screen_height
local world_points = {}

--Icons to test the screen to world. Must be at the screen corners
local icon_top_left
local icon_top_right
local icon_bottom_left
local icon_bottom_right

local base_ground_go
local ground_factory --factory of gameobjects
local grounds = {}   -- List to store ground segments
local grounds_scroll
local ground_width
local num_ground = 6

local score = 0
local game_gui
local utils = require("utils.utils")

function InitGrounds()
	ground_width = go.get("ground#sprite", "size.x")
	local base_pos = go.get_position("ground")
	for i = 1, num_ground do
		local ground_pos = vmath.vector3(base_pos.x + (i - 1) * ground_width, base_pos.y, 1)
		local ground = factory.create(ground_factory, ground_pos)
		table.insert(grounds, ground)
	end
end

function init(self)
	icon_top_left = "icon_top_left"
	icon_top_right = "icon_top_right"
	icon_bottom_left = "icon_bottom_left"
	icon_bottom_right = "icon_bottom_right"

	print("Game controller init")
	msg.post(".", hashes.INPUT_FOCUS_GET)
	state = STATES.ready
	game_camera = "camera#camera" -- get the camera component
	camera_go = "camera"
	player_go = "player"
	player = "player#bird"
	ground_factory = "ground_scroller#factory"
	pipe_factory = "pipe_factory#collection_factory"
	base_ground_go = "ground_scroller/ground" --Ground game object
	self.spawnPos = vmath.vector3()
	--game_gui = go.get("game_ui")--fails!!!

	if game_camera and go.exists(game_camera) then
		print("Camera Found. Change Render")
		msg.post("@render:", "use_camera_projection")
		msg.post(game_camera, "acquire_camera_focus")
	else
		print("Error: Camera component not found!")
	end
	InitGrounds()
end

local function camera_follow()
	local camera_pos = go.get_world_position(camera_go)
	local player_pos = go.get_world_position(player_go)

	camera_pos.x = player_pos.x + 50
	go.set_position(camera_pos, camera_go)
end

local flap_frame = false
function on_input(self, action_id, action)
	local pressFlap = false
	local buttons = action.gamepad_buttons

	-- if action_id == hash("dpad_center") and action.pressed then
	-- 	print("DPAD_CENTER pressed")
	-- 	-- Handle the DPAD_CENTER action here
	-- 	pressFlap=true
	-- end

	-- if action_id == hash("raw") then
	-- 	-- pprint(action.gamepad_buttons)
	-- 	-- pprint(action.gamepad_axis)
	-- 	-- pprint(action.gamepad_hats)
	-- 	if buttons then
	-- 		for i, value in pairs(buttons) do
	-- 			if value == 1 then
	-- 				print("Button pressed: " .. i)
	-- 				pprint(buttons)
	-- 				pprint(action_id) --returns hash raw action
	-- 			end

	-- 			-- A Button
	-- 			if i == 1 and value == 1 then
	-- 				pressFlap = true					
	-- 			end
	-- 		end
	-- 	end
	-- end

	if action_id == hash("select") and action.pressed then
		pressFlap = true
	end

	if (action_id == hashes.INPUT_TOUCH and action.pressed) or pressFlap then
		if state == STATES.ready then
			flap_frame=true
			state = STATES.playing
			msg.post(player, "set_player_state", { state = 1 }) -- Assuming 1 is the alive state			
		else
			if state == STATES.playing then
				msg.post(player, "click")
				local player_pos = go.get_position(player_go)
				-- if player_pos.x > self.spawnPos.x then
				-- 	self.spawnPos.x = self.spawnPos.x + 20
				-- 	print("spawn here")
				-- end
			end
		end
		print("Game Manager click")
	end
end

local function spawn_pipe()
	print("spawn_pipe method called")
	local player_pos = go.get_world_position(player_go)

	--print ("top right " .. world_points.top_right .. "bottom right " .. world_points.bottom_right)
	local spawn_pos = (world_points.top_right + world_points.bottom_right) / 2
	spawn_pos.x = spawn_pos.x + 52 -- + the pipe width
	spawn_pos.z = -1
	--local spawn_pos = vmath.vector3(next_spawn_x, player_pos.y, 0)
	local pipe = collectionfactory.create(pipe_factory, spawn_pos)
	table.insert(pipes, pipe)
	next_spawn_x = next_spawn_x + PIPE_SPAWN_INTERVAL
	--the spawn interval is fine
	--basically the spawn position is always a little right of the screen area.
	--
end

local function adjust_camera_orthographic_zoom(fit_mode, _camera)
	local current_ortho_zoom = camera.get_orthographic_zoom(_camera)
	--print("Current Ortho zoom: " .. current_ortho_zoom)
	local w, h = window.get_size()
	local screen_width = w
	local screen_height = h
	--this is the background texture size.
	local background_width = 288
	local background_height = 512

	-- Calculate the zoom factors for width and height
	local zoom_x = screen_width / background_width
	local zoom_y = screen_height / background_height

	local new_ortho_zoom = 1

	if fit_mode == "horizontal" then
		new_ortho_zoom = zoom_x
	elseif fit_mode == "vertical" then
		new_ortho_zoom = zoom_y
	elseif fit_mode == "area" then
		new_ortho_zoom = math.min(zoom_x, zoom_y)
	else
		print("Invalid fit_mode: " .. tostring(fit_mode))
		return
	end

	go.set(_camera, "orthographic_zoom", new_ortho_zoom)
	--print("New Ortho zoom: " .. new_ortho_zoom)
end

local function get_camera_corner_points(camera)
	local w, h = window.get_size()
	screen_width = w
	screen_height = h

	local projection = go.get(camera, "projection")
	local view = go.get(camera, "view")

	local topLeftx, topLefty = utils.screen_to_world(0, screen_height, 0, w, h, projection, view)
	local topRightx, topRighty = utils.screen_to_world(screen_width, screen_height, 0, w, h, projection, view)
	local bottomLeftx, bottomLefty = utils.screen_to_world(0, 0, 0, w, h, projection, view)
	local bottomRightx, bottomRighty = utils.screen_to_world(screen_width, 0, 0, w, h, projection, view)

	world_points = {
		top_left = vmath.vector3(topLeftx, topLefty, 5),
		top_right = vmath.vector3(topRightx, topRighty, 5),
		bottom_left = vmath.vector3(bottomLeftx, bottomLefty, 5),
		bottom_right = vmath.vector3(bottomRightx, bottomRighty, 5)
	}

	go.set(icon_top_left, "position", world_points.top_left)
	go.set(icon_top_right, "position", world_points.top_right)
	go.set(icon_bottom_left, "position", world_points.bottom_left)
	go.set(icon_bottom_right, "position", world_points.bottom_right)
	-- Print the world points for verification
	--print("Top Left: ", world_points.top_left)
	--print("Top Right: ", world_points.top_right)
	--print("Bottom Left: ", world_points.bottom_left)
	--print("Bottom Right: ", world_points.bottom_right)
end

local HIT_SOUND_DURATION = 0.25

function on_message(self, message_id, message, sender)
	if message_id == hash("window_resized") then
		DISPLAY_WIDTH = message.width
		DISPLAY_HEIGHT = message.height
	end

	if (message_id == hashes.MESSAGE_GAME_OVER) then
		state = STATES.game_over
		print("game.script Game over")
		
		-- Play the hit sound immediately
		msg.post("/sounds#hit", hashes.MESSAGE_PLAY_SOUND)
		
		-- Schedule the dead sound to play after the hit sound duration
		timer.delay(HIT_SOUND_DURATION, false, function()
			msg.post("/sounds#dead", hashes.MESSAGE_PLAY_SOUND)
		end)
	
		-- Send message to the game_ui
		msg.post("go#game_ui", "show")
	end

	if (message_id == hashes.MESSAGE_INCREASE_SCORE) then
		score = score + 1
		msg.post("go#game_ui", hashes.MESSAGE_SET_SCORE, { score = score })
	end

	--we must send a message to increase the score	
end

local function update_grounds()
	for _, ground in ipairs(grounds) do
		local ground_pos = go.get_position(ground)
		--if ground_pos.x + ground_width < go.get_position(camera_go).x - 50 then
		if ground_pos.x + ground_width < world_points.bottom_left.x - 50 then
			-- Reposition the ground segment to the right of the last ground segment
			local last_ground = grounds[#grounds]
			local last_ground_pos = go.get_position(last_ground)
			ground_pos.x = last_ground_pos.x + ground_width
			go.set_position(ground_pos, ground)

			-- Move the repositioned ground segment to the end of the list
			table.remove(grounds, 1)
			table.insert(grounds, ground)
		end
	end
end

function update(self, dt)
	get_camera_corner_points(game_camera)
	adjust_camera_orthographic_zoom("area", game_camera)
	update_grounds()

	if state == STATES.ready then
		--print("The game is waiting..")
		next_spawn_x = go.get_world_position().x + PIPE_SPAWN_INTERVAL
	elseif state == STATES.playing then
		local player_pos = go.get_world_position(player_go)
		if player_pos.x >= next_spawn_x then
			spawn_pipe()
		end
	end
	camera_follow()
end
