-- [[Lua Script File: main_menu.gui_script]]

local hashes = require 'utils.hashes'
local anim = require 'main.modules.animateCalls'

local focus_index = 1
local focus_scale = vmath.vector3(1.2, 1.2, 1)
local default_scale = vmath.vector3(1, 1, 1)

local NODE_IDS = {
	play_button = "playBtn",
	exit_button = "exitBtn"
}

local nodes = {}
local buttons = { NODE_IDS.play_button, NODE_IDS.exit_button }

local button_neighbors = {
	[NODE_IDS.play_button] = { right = NODE_IDS.exit_button },
	[NODE_IDS.exit_button] = { left = NODE_IDS.play_button }
}

local labelText_buttons -- buttons
local labeltext_axis
local labeltext_hats

local function OnClickStartGame()
	msg.post("main:/main#main", "start_game")
end

local function OnClickExitGame()
	sys.exit(0)
end

local function focus_button(button_id)
	for id, _ in pairs(button_neighbors) do
		local scale = (id == button_id) and focus_scale or default_scale
		gui.set_scale(nodes[id], scale)
	end
end

local function navigate(direction)
	local new_focus_index = focus_index
	if direction == "up" then
		new_focus_index = focus_index - 1
	elseif direction == "down" then
		new_focus_index = focus_index + 1
	end

	if new_focus_index < 1 then
		new_focus_index = #buttons
	elseif new_focus_index > #buttons then
		new_focus_index = 1
	end

	focus_index = new_focus_index
	focus_button(buttons[focus_index])
end

local function press_button()
	local button_id = buttons[focus_index]
	print("Pressed button: " .. button_id)
	if button_id == NODE_IDS.play_button then
		OnClickStartGame()
	elseif button_id == NODE_IDS.exit_button then
		OnClickExitGame()
	end
end

function init(self)
	nodes[NODE_IDS.play_button] = gui.get_node(NODE_IDS.play_button)
	nodes[NODE_IDS.exit_button] = gui.get_node(NODE_IDS.exit_button)
	labelText_buttons = gui.get_node("text")
	labeltext_axis = gui.get_node("text1");
	labeltext_hats = gui.get_node("text2");

	msg.post(".", "acquire_input_focus")
	anim.animateButton1(nodes[NODE_IDS.play_button], 0.4)
	focus_button(buttons[focus_index])
end

local function navigate_using_axis(axis_values)
	if axis_values[0] < -0.5 then
		navigate("left")
	elseif axis_values[0] > 0.5 then
		navigate("right")
	elseif axis_values[1] < -0.5 then
		navigate("up")
	elseif axis_values[1] > 0.5 then
		navigate("down")
	end
end

local raw_button_pressed = false
local raw_axis_pressed = false
local raw_axis_pressed_wait_frames = 0

local prev_hat_state = 0

local function table_to_string(tbl)
    local result = ""
    for key, value in pairs(tbl) do
        result = result .. key .. ": " .. tostring(value) .. "\n"
    end
    return result
end

function on_input(self, action_id, action)
	-- if action_id == hash("dpad_center") and action.pressed then
	-- 	print("DPAD_CENTER pressed")
	-- end

	--Unlike Unity on_input is not called every frame
	-- print("Input is called every frame ?")

	-- if action_id == hash("connected") then
	-- 	if action.gamepad_unknown then
	-- 		print("The connected gamepad is unidentified and will only generate raw input")
	-- 	else
	-- 		print("The connected gamepad is known and will generate input actions for buttons and sticks")
	-- 	end
	-- end

	-- --I dont understand 
	-- if action_id == hash("raw") then
    --     local hats = action.gamepad_hats
    --     if hats then
    --         local current_hat_state = hats[1] -- Assuming the first hat switch
    --         if current_hat_state ~= prev_hat_state then
    --             if current_hat_state == 8 then
    --                 navigate("left")
    --             elseif current_hat_state == 2 then
    --                 navigate("right")
    --             elseif current_hat_state == 1 then
    --                 navigate("up")
    --             elseif current_hat_state == 4 then
    --                 navigate("down")
    --             end
    --             prev_hat_state = current_hat_state
    --         end
    --     end
	-- end

	-- --it was more easier to create labels to display this on the game itself...god
	-- if action_id == hash("raw") then
	-- 	print("Buttons:")
	-- 	pprint(action.gamepad_buttons)

	-- 	print("Axes:")
	-- 	pprint(action.gamepad_axis)

	-- 	print("Hats:")
	-- 	pprint(action.gamepad_hats)

	-- 	local combined_info = "Buttons:\n" .. table_to_string(action.gamepad_buttons) ..
    --                       "\nAxes:\n" .. table_to_string(action.gamepad_axis) ..
    --                       "\nHats:\n" .. table_to_string(action.gamepad_hats)

	-- 	gui.set_text(labelText_buttons, table_to_string(action.gamepad_buttons))
	-- 	gui.set_text(labeltext_axis, table_to_string(action.gamepad_axis))
	-- 	gui.set_text(labeltext_hats, table_to_string(action.gamepad_hats))
	-- end

	-- if action_id == hash("raw") then
	-- 	local buttons = action.gamepad_buttons
	-- 	local axes = action.gamepad_axis

	-- 	--Read and test Button
	-- 	if buttons then
	-- 		for i, value in pairs(buttons) do
	-- 			if value == 1 then
	-- 				print("Button pressed: " .. i)
	-- 				pprint(buttons)
	-- 				pprint(action_id)--returns hash raw action
	-- 			end

	-- 			if i == 1 and value == 1 then
	-- 				press_button()
	-- 			end
	-- 		end
	-- 	end

	-- 	if axes then
	-- 		for i, value in pairs(axes) do
	-- 			if (value == 1 or value == -1) then
	-- 				print("Axis " .. i .. " value: " .. value)
	-- 				--pprint(axes)--The gamepad have physical issues ?
	-- 			end
	-- 			-- Vertical Axis
	-- 			if (i == 2 or i == 8) then
	-- 				if value > 0.5 and not raw_axis_pressed then
	-- 					print("navigate up")
	-- 					navigate("up")
	-- 					raw_axis_pressed = true
	-- 				elseif value < -0.5 and not raw_axis_pressed then
	-- 					print("navigate down")
	-- 					navigate("down")
	-- 					raw_axis_pressed = true
	-- 				else
	-- 					-- raw_axis_pressed = false
	-- 				end
	-- 			end
	-- 		end
	-- 	end
	-- end

	-- mapped gamepad, keyboard	
	if action_id == hash("up") and action.pressed then
		navigate("up")
	elseif action_id == hash("down") and action.pressed then
		navigate("down")
	elseif action_id == hash("left") and action.pressed then
		navigate("left")
	elseif action_id == hash("right") and action.pressed then
		navigate("right")
	elseif action_id == hash("select") and action.pressed then
		press_button()
	end

	--handle touch and mouse click
	if action.pressed and gui.pick_node(nodes[NODE_IDS.play_button], action.x, action.y) then
		anim.animateButtonPress(nodes[NODE_IDS.play_button], 0.1)
	end

	if action.released and gui.pick_node(nodes[NODE_IDS.play_button], action.x, action.y) then
		anim.animateButtonRelease(nodes[NODE_IDS.play_button], 0.2)
		OnClickStartGame()
	 end	
end

function update(self, dt)
	if raw_axis_pressed then
		raw_axis_pressed_wait_frames = raw_axis_pressed_wait_frames + 1
		if (raw_axis_pressed_wait_frames > 15) then
			raw_axis_pressed = false
			raw_axis_pressed_wait_frames = 0
			print("reset input axis")
		end
	end
end
