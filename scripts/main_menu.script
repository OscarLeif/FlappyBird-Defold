local scroll_speed = 100.0 -- float
local ground_width = 336   -- int (width of your ground image)

local grounds = {}         --table (like an array)
local menu_camera          -- Local variable for the camera component
local screen_points = {}
local world_points = {}

local DISPLAY_WIDTH = sys.get_config_int("display.width")
local DISPLAY_HEIGHT = sys.get_config_int("display.height")

local screen_width = 0.0
local screen_height = 0.0

local main_menu_gui = msg.url("main_menu:/UI#main_menu") --the .gui_script

local bird
local utils = require "utils.utils"

function init(self)
	print("Main menu controller Init")
	msg.post(".", "acquire_input_focus")
	menu_camera = "Camera#camera" -- get the camera component
	msg.post("@render:", "use_camera_projection")
	msg.post(menu_camera, "acquire_camera_focus")
	bird = "bird"
	if bird and go.exists(bird) then
		print("Bird was found")
		local to = go.get(bird, "position")
		to.y = to.y + 20
		go.animate(bird, "position", go.PLAYBACK_LOOP_PINGPONG, to, go.EASING_INOUTSINE, 2)
	else
		print("bird not found")
	end

	if menu_camera and go.exists(menu_camera) then
		print("Camera Found")
	else
		print("Error: Camera component not found!")
	end
	grounds =
	{
		go.get_id("ground"),
		go.get_id("ground1"),
		go.get_id("ground2"),
		go.get_id("ground3"),
		go.get_id("ground4")
	}
	--setup the screen to world points
	local w, h = window.get_size()
	local screen_width = w
	local screen_height = h

	-- Define the screen points for the corners
	screen_points = {
		top_left = vmath.vector3(0, 0, 0),
		top_right = vmath.vector3(screen_width, 0, 0),
		bottom_left = vmath.vector3(0, screen_height, 0),
		bottom_right = vmath.vector3(screen_width, screen_height, 0)
	}

	print("menu controller End")
end

local function adjust_camera_orthographic_zoom(fit_mode)
	local current_ortho_zoom = camera.get_orthographic_zoom(menu_camera)
	--print("Current Ortho zoom: " .. current_ortho_zoom)
	local w, h = window.get_size()
	local screen_width = w
	local screen_height = h

	local background_width = 288
	local background_height = 512

	-- Calculate the zoom factors for width and height
	local zoom_x = screen_width / background_width
	local zoom_y = screen_height / background_height

	local new_ortho_zoom = 1

	if fit_mode == "horizontal" then
		new_ortho_zoom = zoom_x
	elseif fit_mode == "vertical" then
		new_ortho_zoom = zoom_y
	elseif fit_mode == "area" then
		new_ortho_zoom = math.min(zoom_x, zoom_y)
	else
		print("Invalid fit_mode: " .. tostring(fit_mode))
		return
	end

	go.set(menu_camera, "orthographic_zoom", new_ortho_zoom)
	--print("New Ortho zoom: " .. new_ortho_zoom)
end

--not tested
function adjust_camera_fov(camera, mode)
	local w, h = window.get_size()
	screen_width = w
	screen_height = h

	local aspect_ratio = screen_width / screen_height

	local background_width = 288 -- Replace with your background width
	local background_height = 512 -- Replace with your background height

	-- Calculate FOV to match background size
	local desired_aspect_ratio = background_width / background_height
	local fov

	if mode == "vertical" then
		-- Match the vertical size of the texture
		fov = math.deg(2 * math.atan((background_height / 2) / (screen_height / 2)))
	elseif mode == "horizontal" then
		-- Match the horizontal size of the texture
		fov = math.deg(2 * math.atan((background_width / 2) / (screen_width / 2)))
	elseif mode == "area" then
		-- Match the area of the texture (more complex, depends on how you want to fit it)
		if aspect_ratio > desired_aspect_ratio then
			-- Wider than the background
			fov = math.deg(2 * math.atan((background_width / 2) / (screen_width / 2)))
		else
			-- Taller than the background
			fov = math.deg(2 * math.atan((background_height / 2) / (screen_height / 2)))
		end
	else
		print("Error: Invalid camera mode specified!")
		return
	end

	-- Set the camera's FOV
	if camera and go.exists(camera) then
		print("setup camera FOV " .. fov .. " for mode " .. mode)
		--msg.post(camera, "set_projection", { fov = fov })
		msg.post(camera, "set_projection", { ortho_size = fov })
	else
		print("Error: Camera component not found or invalid when setting FOV!")
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		-- convert mouse/touch screen position to world position
		local w, h = window.get_size()
		local projection = go.get(menu_camera, "projection")
		local view = go.get(menu_camera, "view")
		print("screen X:" .. action.x .. " Y:" .. action.y)
		local worldx, worldy = utils.screen_to_world(action.x, action.y, 0, w, h, projection, view)
		local world = vmath.vector3(worldx, worldy, 0)
		--go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, world, go.EASING_LINEAR, 0.5, 0, moved_to_position) -- <8>
	end	
end

function update(self, dt)
	adjust_camera_orthographic_zoom("area")
	world_points = utils.get_camera_corner_points(menu_camera)

	for i, ground in ipairs(grounds) do
		local pos = go.get_position(ground)
		pos.x = pos.x - scroll_speed * dt
		local x_screen = world_points.bottom_left.x

		if pos.x <= x_screen - ground_width then
			-- Find the maximum x position in the grounds table
			local max_x = pos.x
			for j, other_ground in ipairs(grounds) do
				if other_ground ~= ground then
					local other_pos = go.get_position(other_ground)
					if other_pos.x > max_x then
						max_x = other_pos.x
					end
				end
			end

			-- Move the current ground to the farthest right position
			pos.x = max_x + ground_width - scroll_speed * dt
		end

		go.set_position(pos, ground)
	end
end
