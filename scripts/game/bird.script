local BIRD_STATE = { idle = 0, alive = 1, dead = 2 }
local ACCELERATION = vmath.vector3(0, -620, 0)
local IDLE_SPEED = 110 --80 is a test speed
local OSCILLATION_AMPLITUDE = 0.5
local OSCILLATION_FREQUENCY = 4
local ROTATION_EASING = vmath.vector({ 0, })
local MAX_FALL_SPEED = -450
local FLAPP_SPEED = 280

local player_state = BIRD_STATE.idle
local time = 0

local lume = require("utils.lume")
local hashes = require("utils.hashes")

local sound_url = ""

function init(self)
	self.position = go.get_position(".")
	self.velocity = vmath.vector3()
	self.acceleration = vmath.vector3(ACCELERATION)
	self.rotation = 0
	go.set(".", "euler.z", self.rotation)
end

local function is_falling(self)
	return self.velocity.y < -110
end

local function rotate_player(self, dt)
	if (self.velocity.y > 0) then
		self.rotation = self.rotation + 600 * dt
	elseif (is_falling(self) or player_state == BIRD_STATE.dead) then
		self.rotation = self.rotation - 480 * dt
	end
	self.rotation = lume.clamp(self.rotation, -90, 20)
	go.set(".", "euler.z", self.rotation)
end

function update(self, dt)
	if player_state == BIRD_STATE.idle then
		--print("Bird is moving right and up and down")--ok. debug message
		self.position.x = self.position.x + IDLE_SPEED * dt
		time = time + dt
		self.position.y = self.position.y + OSCILLATION_AMPLITUDE * math.sin(time * OSCILLATION_FREQUENCY)
		go.set_position(self.position)
	elseif player_state == BIRD_STATE.alive then
		self.position.x = self.position.x + IDLE_SPEED * dt
		self.velocity = self.velocity + self.acceleration * dt
		if self.velocity.y < MAX_FALL_SPEED then self.velocity.y = MAX_FALL_SPEED end
		self.position = self.position + self.velocity * dt
		rotate_player(self, dt)
		go.set_position(self.position)
	elseif player_state == BIRD_STATE.dead then
		--print("You die")
		self.position.x = self.position.x
		self.velocity = self.velocity + self.acceleration * dt
		if self.velocity.y < MAX_FALL_SPEED then self.velocity.y = MAX_FALL_SPEED end
		self.position = self.position + self.velocity * dt
		rotate_player(self, dt)
		go.set_position(self.position)
	end
end

local function click(self)
	self.velocity.y = FLAPP_SPEED
	-- Very confused with the sounds url. Hope we can later drop url via drag and drop
	msg.post("/sounds#flap", hashes.MESSAGE_PLAY_SOUND)
	print("flapp") --when sound works clean me
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_player_state") then
		player_state = message.state
	end

	if player_state == BIRD_STATE.alive then
		--input from game.script on_input
		if message_id == hash("click") then
			click(self)
		end
		--Physics Collision
		if (message_id == hashes.PHYSICS_MESSAGE_COLLISION and message.group ~= hashes.SCORE) then
			-- print("The bird have a collision")
			player_state = BIRD_STATE.dead
			print("pause animation here")
			-- msg.post("#sprite", "set_playback_rate", {playback_rate = 0})
			go.set("#sprite", "playback_rate",0)
			--really need to organize the url names and ids
			msg.post("go", hashes.MESSAGE_GAME_OVER)
			if (message.group == hashes.DIRT) then
				self.acceleration = vmath.vector3(0,0,0)
				self.velocity.y = 0
			end
		elseif (message_id == hashes.PHYSICS_MESSAGE_TRIGGER and message.enter) then
			print("Increase score")
			msg.post("game:/go#game", hashes.MESSAGE_INCREASE_SCORE)
			msg.post("/sounds#coin", hashes.MESSAGE_PLAY_SOUND)
		end
	elseif player_state == BIRD_STATE.dead then
		if (message.group == hashes.DIRT) then
			self.acceleration = vmath.vector3(0,0,0)
			self.velocity.y = 0
		end
		--nothing happens
	end
end
